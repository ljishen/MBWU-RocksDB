---
- hosts: all
  any_errors_fatal: true
  vars:
    core_workloads: [ 'workloada', 'workloadb', 'workloadc', 'workloadd', 'workloade', 'workloadf' ]
    runtimes_dir: "{{ workdir }}/runtimes"
    ycsb_dir: "{{ runtimes_dir }}/{{ device_name }}/YCSB"
    maven_dir: "{{ runtimes_dir }}/apache-maven-{{ maven_version }}"
    rocksdbjni_rmi_exe: "{{ runtimes_dir }}/rocksdbjni-rmi-{{ rocksdbjni_rmi_version }}-jar-with-dependencies.jar"
    device_fullnames: []
  pre_tasks:
    - name: collect the name of all test devices
      set_fact:
        device_names: "{{ test_devices.split(',') }}"
    - name: get the fullnames of test devices
      set_fact:
        device_fullnames: "{{ device_fullnames + [ '/dev/' ~ item ] }}"
      loop: "{{ device_names }}"
    - name: retrieve the stat of block devices
      stat:
        follow: no
        get_attributes: no
        get_checksum: no
        get_md5: no
        get_mime: no
        path: "{{ device_fullname }}"
      loop: "{{ device_fullnames }}"
      loop_control:
        loop_var: device_fullname
      register: stat_res
    - name: verify the existence of block devices
      debug:
        msg: >
          Please double check the existence of block device {{ item.item }}
      when: item.stat.isblk is not defined or not item.stat.isblk
      failed_when: item.stat.isblk is not defined or not item.stat.isblk
      loop: "{{ stat_res.results }}"

    - name: collect run workloads
      set_fact:
        run_workloads: "{{ ycsb_run_workloads.split(',') }}"
    - name: retrieve the stats of user-defined workload parameter files
      stat:
        follow: yes
        get_attributes: no
        path: "{{ item }}"
      when: item not in core_workloads
      loop: "{{ run_workloads }}"
      delegate_to: localhost
      register: stat_res
    - name: verify the paths of user-defined workload parameter files
      debug:
        msg: >
          Please verify the path of the workload parameter file {{ item.item }}
      when: item.stat is defined and not item.stat.exists
      failed_when: item.stat is defined and not item.stat.exists
      loop: "{{ stat_res.results }}"

  roles:
    - setup
    # - role: run
    #   vars:
    #     local_tmp_data_dir: "{{ inventory_dir }}/tmp/data"
...
