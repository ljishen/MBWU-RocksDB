---
- hosts: rocksdb
  tasks:
    - name: collect the name of all test devices
      set_fact:
        device_names: "{{ init_devices.split(',') }}"
    - name: get the fullnames of test devices
      set_fact:
        device_fullnames: "{{ device_fullnames | default([]) + [ '/dev/' ~ item ] }}"
      loop: "{{ device_names }}"
    - name: retrieve the stat of block devices
      stat:
        follow: no
        get_attributes: no
        get_checksum: no
        get_md5: no
        get_mime: no
        path: "{{ device_fullname }}"
      loop: "{{ device_fullnames }}"
      loop_control:
        loop_var: device_fullname
      register: stat_res
    - name: verify the existence of block devices
      debug:
        msg: >
          Please double check the existence of block device {{ item.item }}
      when: item.stat.isblk is not defined or not item.stat.isblk
      failed_when: item.stat.isblk is not defined or not item.stat.isblk
      loop: "{{ stat_res.results }}"

    - name: check whether the number of devics the same as the number of rmi ports
      debug:
        msg: >
          The number of devices specified is not the same as the number of rmi ports
          for host {{ inventory_hostname }}
      when: device_names | length != rmi_ports | length
      failed_when: device_names | length != rmi_ports | length

    - name: collect run workloads
      set_fact:
        run_workloads: "{{ ycsb_run_workloads.split(',') }}"
    - name: retrieve the stats of user-defined workload parameter files
      stat:
        follow: yes
        get_attributes: no
        path: "{{ item }}"
      when: item not in core_workloads
      loop: "{{ run_workloads }}"
      register: stat_res
      delegate_to: localhost
    - name: verify the paths of user-defined workload parameter files
      debug:
        msg: >
          Please verify the path of the workload parameter file {{ item.item }}
      when: item.stat.isreg is not defined or not item.stat.isreg
      failed_when: item.stat.isreg is not defined or not item.stat.isreg
      loop: "{{ stat_res.results }}"

- hosts: rocksdb
  serial: 1
  roles: setup

- hosts: rocksdb
  roles: run
...
