---
- name: ensure the presence of remote output dir {{ remote_output_dir }}
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ remote_output_dir }}"
    state: directory

- name: ensure the presence of local output dir {{ local_output_dir }}
  become: yes
  local_action:
    module: file
    owner: "{{ lookup('env', 'USER') }}"
    path: "{{ local_output_dir }}"
    state: directory

- name: ({{ notes }}) copy user-defined workload parameter file to {{ local_tmp_data_dir }}
  local_action:
    module: copy
    backup: yes
    dest: "{{ local_tmp_data_dir }}/"
    force: yes
    owner: "{{ lookup('env', 'USER') }}"
    remote_src: no
    src: "templates/{{ cur_workload }}"
  when: cur_workload not in core_workloads

- name: ({{ notes }}) deploy workload parameter file
  template:
    backup: yes
    dest: "{{ remote_workload_file }}"
    force: yes
    owner: "{{ ansible_user }}"
    src: "{{ local_tmp_data_dir }}/{{ cur_workload }}"
  register: template_res

- name: ({{ notes }}) append common properties to parameter file
  blockinfile:
    backup: no
    block: "{{ lookup('template', 'common') }}"
    create: no
    insertafter: EOF
    owner: "{{ ansible_user }}"
    path: "{{ remote_workload_file }}"
    state: present

- name: ({{ notes }}) clean backup
  shell: |
    if cmp -s {{ template_res.backup_file }} {{ remote_workload_file }}; then
      rm -f {{ template_res.backup_file }}
    fi
  when: template_res.backup_file is defined

- include_tasks: backup_file.yml
  vars:
    local_file: "{{ local_workload_file }}"
    remote_file: "{{ remote_workload_file }}"

- name: ({{ notes }}) deploy the RocksDB options file
  copy:
    backup: yes
    dest: "{{ remote_rocksdb_options_file }}"
    force: yes
    owner: "{{ lookup('env', 'USER') }}"
    remote_src: no
    src: "{{ rocksdb_options_file }}"

- include_tasks: backup_file.yml
  vars:
    local_file: "{{ local_rocksdb_options_file }}"
    remote_file: "{{ remote_rocksdb_options_file }}"

- name: ({{ notes }}) load the data
  shell: >
    bin/ycsb load rocksdb -s
    -P {{ remote_workload_file }}
    -p rocksdb.dir={{ rocksdb_data_dir }}
    -p options.file={{ remote_rocksdb_options_file }}
    > {{ remote_output_file }} 2>&1
  args:
    chdir: "{{ ycsb_dir }}"
  environment:
    PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"

- include_tasks: backup_file.yml
  vars:
    local_file: "{{ local_output_file }}"
    remote_file: "{{ remote_output_file }}"

- set_fact:
    outer_notes_repeat: "{{ notes }}"
    tracking_values: []
    steady_state: False

- include_tasks: do_run.yml
  vars:
    notes: "{{ outer_notes_repeat }}, round {{ cur_round }}"
    output_filename: "transactions_round{{ cur_round }}.dat"

    # flag 'b' for before the workload execution
    # flag 'a' for after the workload execution
    device_stats_filename: "device_stats_round{{ cur_round }}_{{ flag }}.log"

    local_device_stats_file: "{{ local_output_dir }}/{{ device_stats_filename }}"
    remote_device_stats_file: "{{ remote_output_dir }}/{{ device_stats_filename }}"
    device_stats_command: >
      grep -w '{{ device_name }}' /proc/diskstats
  loop: "{{ range(1, maximum_rounds + 1) | list }}"
  loop_control:
    loop_var: cur_round
...
