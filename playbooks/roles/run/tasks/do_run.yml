---
- block:

    - block:
        - name: ({{ notes }}) ensure the presence of RocksDB data dir {{ rocksdb_data_dir }}
          become: yes
          file:
            owner: "{{ ansible_user }}"
            path: "{{ rocksdb_data_dir }}"
            state: "{{ item }}"
          loop:
            - absent
            - directory

        - name: ({{ notes }}) load the data
          shell: >
            bin/ycsb load rocksdb -s
            -P {{ remote_workload_file }}
            -p rocksdb.dir={{ rocksdb_data_dir }}
            -p options.file={{ rocksdb_remote_input_options_file }}
            > {{ remote_load_output_file }} 2>&1
          args:
            chdir: "{{ ycsb_dir }}"
          environment:
            PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"

        - name: ({{ notes }}) print the size of database dir after loaded
          command: du -BK {{ rocksdb_data_dir }}

        - include_tasks: backup_file.yml
          vars:
            local_file: "{{ local_load_output_file }}"
            remote_file: "{{ remote_load_output_file }}"

        - include_tasks: backup_file.yml
          vars:
            local_file: "{{ local_rocksdb_log_file }}"
            remote_file: "{{ rocksdb_data_dir }}/LOG"
            phase: load
      when: cur_load_data

    - set_fact:
        cur_load_data: False
      when: load_data_once

    - name: ({{ notes }}) kill the remnant processes for tracing block requests
      become: yes
      shell: pkill -SIGTERM --pidfile {{ blkstat_pid_file }} ; rm --force {{ blkstat_pid_file }}

    - name: ({{ notes }}) disable all kernel tracing and clear the trace buffers
      become: yes
      command: trace-cmd reset

    - name: ({{ notes }}) free the slab objects and pagecache
      # See https://www.kernel.org/doc/Documentation/sysctl/vm.txt
      become: yes
      shell: sync; echo 3 > /proc/sys/vm/drop_caches

    - block:
        - name: ({{ notes }}) start to trace the block events for device {{ pdevice_fullname }}
          become: yes
          shell: >
            nohup blktrace
            --act-mask=complete
            --act-mask=issue
            --buffer-size=4096KiB
            --dev={{ pdevice_fullname }}
            --output={{ pdevice_name }}
            --output-dir={{ remote_blkstat_log_dir }}
            --relay={{ debugfs_mountpoint }}
            < /dev/null > {{ workdir }}/nohup.out 2>&1 &
            echo $! > {{ blkstat_pid_file }}

        - name: ({{ notes }}) pause to wait for the tracer to start
          pause:
            seconds: 3
      when: cur_trace_block_rq

    - name: ({{ notes }}) get the stats of device {{ pdevice_fullname }} (before)
      # We don't want to interfere the stats of the block device so just not to
      # write the result directly to file here.
      shell: "{{ device_stats_command }}"
      register: before_stats_res

    - name: ({{ notes }}) execute the workload
      shell: >
        bin/ycsb run rocksdb -s
        -P {{ remote_workload_file }}
        -p rocksdb.dir={{ rocksdb_data_dir }}
        > {{ remote_transactions_output_file }} 2>&1
      args:
        chdir: "{{ ycsb_dir }}"
      environment:
        PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"

    - name: ({{ notes }}) get the stats of device {{ pdevice_fullname }} (after)
      shell: "sync; {{ device_stats_command }}"
      register: after_stats_res

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_transactions_output_file }}"
        remote_file: "{{ remote_transactions_output_file }}"

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_rocksdb_log_file }}"
        remote_file: "{{ rocksdb_data_dir }}/LOG"
        phase: transactions

    - name: ({{ notes }}) get the latest RocksDB OPTIONS file
      shell: find {{ rocksdb_data_dir }} -name "OPTIONS-*" -type f | sort | tail -1
      register: comm_res

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_output_dir }}/OPTIONS"
        remote_file: "{{ comm_res.stdout }}"

    - name: ({{ notes }}) save device stats to files
      copy:
        backup: no
        content: "{{ item.register.stdout }}"
        dest: "{{ remote_device_stats_file }}"
        force: yes
        owner: "{{ ansible_user }}"
      vars:
        flag: "{{ item.flag }}"
      loop:
        - { register: "{{ before_stats_res }}", flag: 'b' }
        - { register: "{{ after_stats_res }}", flag: 'a' }

    - include_tasks: backup_file.yml
      vars:
        flag: "{{ item }}"
        local_file: "{{ local_device_stats_file }}"
        remote_file: "{{ remote_device_stats_file }}"
      loop: [ 'b', 'a' ]

    - block:
        - name: ({{ notes }}) stop to trace block requests
          become: yes
          shell: pkill -SIGINT --pidfile {{ blkstat_pid_file }} ; rm --force {{ blkstat_pid_file }}

        - name: ({{ notes }}) pause to wait for the block request tracer to finish
          pause:
            seconds: 10

        - name: ({{ notes }}) archive the blkstat log dir
          archive:
            dest: "{{ remote_blkstat_log_archive }}"
            format: "{{ blkstat_archive_format }}"
            owner: "{{ ansible_user }}"
            path: "{{ remote_blkstat_log_dir }}"
            remove: no

        - name: ({{ notes }}) parse output of event streams of {{ pdevice_fullname }}
          command: >
            blkparse
            --act-mask=issue
            --input-directory={{ remote_blkstat_log_dir }}
            --input={{ pdevice_name }}
            --output={{ remote_blkstat_text_file }}
            --dump-binary={{ remote_blkstat_bin_file }}
            --per-program-stats

        - name: ({{ notes }}) generate I/O size distribution
          shell: >
            {{ role_path }}/files/ioszdist.sh {{ remote_blkstat_text_file }}
            > {{ remote_ioszdist_log_file }} 2>&1

        - include_tasks: backup_file.yml
          vars:
            local_file: "{{ local_file }}"
            remote_file: "{{ remote_file }}"
          loop:
            - { local_file: "{{ local_output_dir }}/{{ remote_blkstat_log_archive | basename }}",
                remote_file: "{{ remote_blkstat_log_archive }}" }
            - { local_file: "{{ local_output_dir }}/{{ blkstat_text_filename }}",
                remote_file: "{{ remote_blkstat_text_file }}" }
            - { local_file: "{{ local_output_dir }}/{{ blkstat_bin_filename }}",
                remote_file: "{{ remote_blkstat_bin_file }}" }
            - { local_file: "{{ local_output_dir }}/{{ ioszdist_log_filename }}",
                remote_file: "{{ remote_ioszdist_log_file }}" }
      when: cur_trace_block_rq

    - set_fact:
        cur_trace_block_rq: False
      when: trace_block_rq_once

    - name: ({{ notes }}) extract the throughput value from output
      command: >
        grep -oP '\[OVERALL\],\s+Throughput\(ops/sec\),\s+\K[\d.]+' {{ remote_transactions_output_file }}
      register: comm_res

    - name: ({{ notes }}) save throughput for steady state detection
      set_fact:
        tracking_values: "{{ tracking_values + [ comm_res.stdout | float ] }}"

    - name: ({{ notes }}) check steady state
      script: >
        {{ role_path }}/files/verify_ss.py '{{ tracking_values }}' {{ measurement_window_size }}
      register: script_res
      ignore_errors: yes

    - name: ({{ notes }}) update loop condition
      set_fact:
        steady_state: "{{ True if script_res.rc == 0 else False }}"

  when: not steady_state
...
