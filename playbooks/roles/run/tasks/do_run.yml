---
- block:

    - name: ({{ notes }}) kill the remnant processes for tracing block requests
      become: yes
      shell: pkill -SIGTERM --pidfile {{ blkstat_pid_file }} ; rm --force {{ blkstat_pid_file }}

    - block:
        - name: ({{ notes }}) ensure the presence of RocksDB data dir {{ rocksdb_data_dir }}
          become: yes
          file:
            owner: "{{ ansible_user }}"
            path: "{{ rocksdb_data_dir }}"
            state: "{{ item }}"
          loop:
            - absent
            - directory

        - include_tasks: free_cache.yml

        - include_tasks: start_blkstat.yml
          when: trace_load_block_rq

        - name: ({{ notes }}) load the data
          shell: >
            bin/ycsb load rocksdb -s
            -P {{ remote_workload_file }}
            -p rocksdb.dir={{ rocksdb_data_dir }}
            -p options.file={{ rocksdb_remote_input_options_file }}
            > {{ remote_load_output_file }} 2>&1
          args:
            chdir: "{{ ycsb_dir }}"
          environment:
            PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"

        - include_tasks: stop_blkstat.yml
          when: trace_load_block_rq

        - name: ({{ notes }}) print the size of database dir after loaded
          command: du -BK {{ rocksdb_data_dir }}

        - include_tasks: backup_file.yml
          vars:
            local_file: "{{ local_load_output_file }}"
            remote_file: "{{ remote_load_output_file }}"

        - include_tasks: backup_file.yml
          vars:
            local_file: "{{ local_rocksdb_log_file }}"
            remote_file: "{{ rocksdb_data_dir }}/LOG"
      vars:
        phase: load
      when: cur_load_data

    - set_fact:
        cur_load_data: False
      when: load_data_once

    - include_tasks: free_cache.yml

    - include_tasks: start_blkstat.yml
      vars:
        phase: transactions
      when: cur_trace_transactions_block_rq

    - name: ({{ notes }}) get the stats of device {{ pdevice_fullname }} (before)
      # We don't want to interfere the stats of the block device so just not to
      # write the result directly to file here.
      shell: "{{ device_stats_command }}"
      register: before_stats_res

    - name: ({{ notes }}) execute the workload
      shell: >
        bin/ycsb run rocksdb -s
        -P {{ remote_workload_file }}
        -p rocksdb.dir={{ rocksdb_data_dir }}
        > {{ remote_transactions_output_file }} 2>&1
      args:
        chdir: "{{ ycsb_dir }}"
      environment:
        PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"

    - name: ({{ notes }}) get the stats of device {{ pdevice_fullname }} (after)
      shell: "sync; {{ device_stats_command }}"
      register: after_stats_res

    - include_tasks: stop_blkstat.yml
      vars:
        phase: transactions
      when: cur_trace_transactions_block_rq

    - set_fact:
        cur_trace_transactions_block_rq: False
      when: trace_transactions_block_rq_once

    - name: ({{ notes }}) save device stats to files
      copy:
        backup: no
        content: "{{ item.register.stdout }}"
        dest: "{{ remote_device_stats_file }}"
        force: yes
        owner: "{{ ansible_user }}"
      vars:
        flag: "{{ item.flag }}"
      loop:
        - { register: "{{ before_stats_res }}", flag: 'b' }
        - { register: "{{ after_stats_res }}", flag: 'a' }

    - include_tasks: backup_file.yml
      vars:
        flag: "{{ item }}"
        local_file: "{{ local_device_stats_file }}"
        remote_file: "{{ remote_device_stats_file }}"
      loop: [ 'b', 'a' ]

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_transactions_output_file }}"
        remote_file: "{{ remote_transactions_output_file }}"

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_rocksdb_log_file }}"
        remote_file: "{{ rocksdb_data_dir }}/LOG"
        phase: transactions

    - name: ({{ notes }}) get the latest RocksDB OPTIONS file
      shell: find {{ rocksdb_data_dir }} -name "OPTIONS-*" -type f | sort | tail -1
      register: comm_res

    - include_tasks: backup_file.yml
      vars:
        local_file: "{{ local_output_dir }}/OPTIONS"
        remote_file: "{{ comm_res.stdout }}"

    - name: ({{ notes }}) extract the throughput value from output
      command: >
        grep -oP '\[OVERALL\],\s+Throughput\(ops/sec\),\s+\K[\d.]+' {{ remote_transactions_output_file }}
      register: comm_res

    - name: ({{ notes }}) save throughput for steady state detection
      set_fact:
        tracking_values: "{{ tracking_values + [ comm_res.stdout | float ] }}"

    - name: ({{ notes }}) check steady state
      script: >
        {{ role_path }}/files/verify_ss.py '{{ tracking_values }}' {{ measurement_window_size }}
      register: script_res
      ignore_errors: yes

    - name: ({{ notes }}) update loop condition
      set_fact:
        steady_state: "{{ True if script_res.rc == 0 else False }}"

  when: not steady_state
...
