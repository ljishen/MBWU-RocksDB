---
- name: ({{ notes }}) unmount filesystem for devices
  become: yes
  mount:
    backup: no
    path: '{{ device_mountpoint }}'
    src: '{{ device_fullname }}'
    state: unmounted
  vars:
    device_name: '{{ device_fullname | basename }}'
  loop: '{{ device_fullnames }}'
  loop_control:
    loop_var: device_fullname

- include_tasks: precondition/main.yml
  run_once: yes

- name: ({{ notes }}) create xfs filesystem for devices
  become: yes
  filesystem:
    dev: '{{ device_fullname }}'
    force: yes
    fstype: xfs
    opts: -K # Do not attempt to discard blocks at mkfs time
  loop: '{{ device_fullnames }}'
  loop_control:
    loop_var: device_fullname

- name: ({{ notes }}) mount devices to the corresponding mountpoints
  become: yes
  mount:
    backup: no
    boot: no
    fstype: xfs
    opts: nodiscard
    path: '{{ device_mountpoint }}'
    src: '{{ device_fullname }}'
    state: mounted
  vars:
    device_name: '{{ device_fullname | basename }}'
  loop: '{{ device_fullnames }}'
  loop_control:
    loop_var: device_fullname

- name: ({{ notes }}) update owner of device mountpoints
  become: yes
  file:
    owner: '{{ ansible_user }}'
    path: '{{ device_mountpoint }}'
    state: directory
  loop: '{{ device_names }}'
  loop_control:
    loop_var: device_name

- include_tasks: rocksdb_rmi_server/start.yml
  vars:
    phase: load

- include_tasks: free_cache.yml

- block:
    - name: ({{ notes }}) start YCSB loading phase in the background
      vars:
        result_from_local: True
      shell: |
        nohup stdbuf -oL -eL \
            bin/ycsb load rocksdb -s \
            -P {{ ycsb_workload_file }} \
            -target {{ target_ops_per_sec_on_load }} \
            -p rocksdb.dir={{ rocksdb_data_dir }} \
            -p rocksdb.optionsfile={{ rocksdb_remote_input_options_file }} \
            -p rocksdb.registryport={{ rmi_ports[loop_idx] }} \
            -p rocksdb.registryhost={{ ansible_host }} \
            < /dev/null \
            > {{ ycsb_load_output_file }} 2>&1 &
      args:
        chdir: '{{ ycsb_dir }}'
      environment:
        PATH: "{{ maven_dir }}/bin:{{ ansible_env['PATH'] }}"
      loop: '{{ device_names }}'
      loop_control:
        loop_var: device_name
        index_var: loop_idx
      register: comm_res
      changed_when: comm_res.rc == 0

    - include_tasks: save_ycsb_pids.yml
      vars:
        ycsb_pid_file: '{{ ycsb_load_pid_file }}'

    - name: ({{ notes }}) wait YCSB loading phase to finish
      include_tasks: wait_single_async_task.yml
      vars:
        pid_file: '{{ ycsb_load_pid_file }}'
      loop: '{{ device_names }}'
      loop_control:
        loop_var: device_name
  delegate_to: localhost

- include_tasks: rocksdb_rmi_server/stop.yml

- name: ({{ notes }}) print the size of database dir after loaded
  command: du -BK {{ rocksdb_data_dir }}
  loop: '{{ device_names }}'
  loop_control:
    loop_var: device_name
  changed_when: False

- name: ({{ notes }}) backup RocksDB log files
  include_tasks: backup_file.yml
  vars:
    local_file: '{{ local_rocksdb_log_file }}'
    remote_file: '{{ rocksdb_data_dir }}/LOG'
    phase: load
  loop: '{{ device_names }}'
  loop_control:
    loop_var: device_name
