---
- name: ({{ notes }}) ensure the presence of ycsb sys usage info dirs
  become: yes
  file:
    owner: "{{ lookup('env', 'USER') }}"
    path: "{{ ycsb_sys_usage_info_dir }}"
    state: directory
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name
  delegate_to: localhost

- name: ({{ notes }}) ensure the presence of rocksdb sys usage info dirs
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ rocksdb_sys_usage_info_dir }}"
    state: directory
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name

- include_tasks: run_tasks_on_host_devices.yml
  vars:
    tasks_filename: create_remote_storage_sys_usage_info_dirs.yml
  loop: "{{ groups['storage'] }}"
  run_once: yes

- include_tasks: create_local_storage_sys_usage_info_dirs.yml
  loop: "{{ groups['storage'] }}"
  run_once: yes

- name: ({{ notes }}) request identification info of devices
  become: yes
  shell: >
    hdparm -I {{ device_fullname }} > {{ remote_hdparm_id_info_file }}
  vars:
    device_name: "{{ device_fullname | basename }}"
  loop: "{{ device_fullnames }}"
  loop_control:
    loop_var: device_fullname
  changed_when: False

- include_tasks: backup_file.yml
  vars:
    local_file: "{{ local_hdparm_id_info_file }}"
    remote_file: "{{ remote_hdparm_id_info_file }}"
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name

- block:
    - name: ({{ notes }}) check the validity of RocksDB data dirs
      stat:
        follow: yes
        path: "{{ rocksdb_data_dir }}/CURRENT"
      loop: "{{ device_names }}"
      loop_control:
        loop_var: device_name
      register: stat_res

    - debug:
        msg: >
          RocksDB data dir {{ item.invocation.module_args.path | dirname }} does not contain valid data!
          You will need to load the data first.
      when: item.stat.isreg is not defined or not item.stat.isreg
      failed_when: item.stat.isreg is not defined or not item.stat.isreg
      loop: "{{ stat_res.results }}"
  when: not load_data

- block:
    - include_tasks: run_tasks_on_host_devices.yml
      vars:
        tasks_filename: deploy_wipc_job_file.yml
      loop: "{{ groups['storage'] }}"
      run_once: yes

    - name: ({{ notes }}) deploy RocksDB options file
      template:
        backup: yes
        dest: "{{ rocksdb_remote_input_options_file }}"
        force: yes
        owner: "{{ ansible_user }}"
        src: "{{ rocksdb_options_file }}"
      loop: "{{ device_names }}"
      loop_control:
        loop_var: device_name
  when: load_data

- name: ({{ notes }}) copy user-defined workload parameter file to {{ local_tmp_data_dir }}
  copy:
    backup: yes
    dest: "{{ local_tmp_data_dir }}/{{ cur_workload }}"
    force: yes
    owner: "{{ lookup('env', 'USER') }}"
    remote_src: no
    src: "{{ cur_workload_path }}"
  delegate_to: localhost
  run_once: yes
  when: cur_workload_path not in core_workloads

- block:
    - name: ({{ notes }}) generate YCSB workload parameter file
      template:
        backup: yes
        dest: "{{ ycsb_workload_file }}"
        force: yes
        owner: "{{ lookup('env', 'USER') }}"
        src: "{{ local_tmp_data_dir }}/{{ cur_workload }}"
      loop: "{{ device_names }}"
      loop_control:
        loop_var: device_name
      register: template_res

    - name: ({{ notes }}) append common properties to the workload parameter file
      blockinfile:
        backup: no
        block: "{{ lookup('template', 'common') }}"
        create: no
        insertafter: EOF
        owner: "{{ lookup('env', 'USER') }}"
        path: "{{ ycsb_workload_file }}"
        state: present
      loop: "{{ device_names }}"
      loop_control:
        loop_var: device_name

    - name: ({{ notes }}) clean backup
      shell: |
        if cmp -s {{ item.backup_file }} {{ item.dest }}; then
          rm --force {{ item.backup_file }}
        fi
      when: item.backup_file is defined
      loop: "{{ template_res.results }}"
  delegate_to: localhost

- include_tasks: kill_procs.yml
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name

- include_tasks: perf_stats/start_collect.yml
  loop: "{{ device_fullnames }}"
  loop_control:
    loop_var: device_fullname

- name: ({{ notes }}) init facts (remote)
  set_fact:
    cur_load_data: "{{ load_data }}"
    outer_notes_repeat: "{{ notes }}"

- name: ({{ notes }}) init facts (local)
  set_fact:
    tracking_values: []
    steady_state: False
  delegate_to: localhost
  delegate_facts: True
  run_once: yes

- include_tasks: do_run.yml
  vars:
    notes: "{{ outer_notes_repeat }}, round {{ cur_round }}"

    # flag 'b' stands for the stats before executing the workload
    # flag 'a' stands for the stats after executing the workload
    device_stats_filename: "device_stats_round{{ cur_round }}_{{ flag }}.log"

    local_device_stats_file: "{{ local_output_dir }}/{{ device_stats_filename }}"
    remote_device_stats_file: "{{ remote_output_dir }}/{{ device_stats_filename }}"
    device_stats_command: >
      grep '{{ device_name }}' /proc/diskstats
  loop: "{{ range(1, maximum_rounds + 1) | list }}"
  loop_control:
    loop_var: cur_round

- include_tasks: perf_stats/stop_collect.yml
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name

- name: ({{ notes }}) synchronize remote system usage info
  synchronize:
    delete: yes
    dest: "{{ local_sys_usage_info_dir }}"
    mode: pull
    recursive: yes
    src: "{{ rocksdb_sys_usage_info_dir }}"
    times: yes
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name
...
