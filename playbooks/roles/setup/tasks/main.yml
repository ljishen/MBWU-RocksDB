---
- name: ensure the presence of {{ workdir }}
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ workdir }}"
    state: directory

- name: download RocksDB source code
  unarchive:
    creates: "{{ rocksdb_dir }}"
    dest: "{{ workdir }}"
    keep_newer: no
    remote_src: yes
    src: https://codeload.github.com/facebook/rocksdb/tar.gz/v{{ rocksdb_version }}

- name: check if JDK installed
  command: javac -version
  register: comm_res
  changed_when: False

- block:
    - name: add WebUpd8 Oracle Java PPA
      apt_repository:
        repo: ppa:webupd8team/java
        state: present
        update_cache: yes

    - name: auto accept Oracle license
      shell: >
        echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

    - name: install JDK 8
      apt:
        install_recommends: no
        name:
          - oracle-java8-installer
        state: present
  become: yes
  when: comm_res.rc != 0

- name: detect JAVA_HOME
  shell: dirname "$(dirname "$(readlink -f "$(which javac)")")"
  register: java_home_res
  changed_when: False

- name: install dependent apt packages
  become: yes
  apt:
    autoclean: yes
    install_recommends: no
    name:
      - gcc
      - libgflags-dev
      - libsnappy-dev
      - zlib1g-dev
      - libbz2-dev
      - liblz4-dev
      - libzstd-dev
      - python3-numpy
      - blktrace
      - parted
      - xfsprogs
      - fio
    state: present
    update_cache: yes

- name: check if rocksdb-{{ rocksdb_version }}.patch exists
  local_action:
    module: stat
    follow: no
    get_attributes: no
    get_checksum: no
    get_md5: no
    get_mime: no
    path: "{{ role_path }}/files/rocksdb-{{ rocksdb_version }}.patch"
  register: stat_res

- block:
    - name: copy rocksdb-{{ rocksdb_version }}.patch to the remote
      copy:
        backup: no
        dest: "{{ workdir }}/patches/"
        force: yes
        src: "{{ stat_res.stat.path }}"
      register: copy_res

    - name: apply patch to rocksdb-{{ rocksdb_version }}
      # '-N' option instructs applying patch only forwardly without trying reverse-apply
      # '-r -' option instructs not to create rejectfile
      shell: patch -N -r - < {{ copy_res.dest }} || true
      args:
        chdir: "{{ rocksdb_dir }}"
  when: stat_res.stat.isreg is defined and stat_res.stat.isreg

- name: build RocksJava (may take a long time)
  command: >
    make -j{{ ansible_processor_vcpus - 2 }} rocksdbjavastatic
  args:
    chdir: "{{ rocksdb_dir }}"
    creates: "{{ rocksdbjni_src }}"
  environment:
    JAVA_HOME: '{{ java_home_res.stdout }}'

- name: ensure the presence of rocksdbjni dir in maven repo
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ rocksdbjni_dest_dir }}"
    state: directory

- name: copy rocksdbjni jar to maven repository
  copy:
    dest: "{{ rocksdbjni_dest_dir }}/rocksdbjni-{{ rocksdb_version }}.jar"
    force: yes
    remote_src: yes
    src: "{{ rocksdbjni_src }}"

- name: copy rocksdbjni pom to maven repository
  copy:
    dest: "{{ rocksdbjni_dest_pom }}"
    force: yes
    remote_src: yes
    src: "{{ rocksdb_dir }}/java/rocksjni.pom"

- name: update the version of the rocksdbjni-{{ rocksdb_version }}.pom
  lineinfile:
    backrefs: yes
    create: no
    line: '\1<version>{{ rocksdb_version }}</version>'
    path: "{{ rocksdbjni_dest_pom }}"
    regexp: '^(\s+)<version>-</version>$'
    state: present

- name: download Apache Maven
  unarchive:
    creates: "{{ maven_dir }}"
    dest: "{{ workdir }}"
    keep_newer: no
    remote_src: yes
    src: http://mirrors.sorengard.com/apache/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz

- name: clone YCSB
  git:
    bare: no
    clone: yes
    depth: 1
    dest: "{{ ycsb_dir }}"
    force: yes
    repo: https://github.com/ljishen/YCSB.git
    update: yes
    version: "{{ ycsb_version }}"
  register: git_res

- name: update RocksDB version in YCSB
  lineinfile:
    backrefs: yes
    create: no
    line: '\1<rocksdb.version>{{ rocksdb_version }}</rocksdb.version>'
    path: "{{ ycsb_dir }}/pom.xml"
    regexp: '^(\s+)<rocksdb\.version>[\d.]+</rocksdb\.version>$'
    state: present

- name: check if ycsb-rocksdb-binding exists
  find:
    file_type: file
    paths: "{{ ycsb_dir }}/rocksdb/target"
    patterns: 'ycsb-rocksdb-binding-*.tar.gz'
    use_regex: no
  register: find_res

- name: build RocksDB YCSB binding
  command: >
    {{ maven_dir }}/bin/mvn -pl com.yahoo.ycsb:rocksdb-binding -am clean package
  args:
    chdir: "{{ ycsb_dir }}"
  when: git_res.after != git_res.before or find_res.matched == 0

- name: config scaling governor for online CPUs
  become: yes
  script: "{{ role_path }}/files/config_cpu.sh {{ cpu_scaling_governor }}"
  register: cpu_config_res
  changed_when: "cpu_config_res.rc == 0"

- name: set the nofile soft limit to {{ nofile_soft_limit }}
  become: yes
  pam_limits:
    domain: "{{ ansible_user }}"
    limit_item: nofile
    limit_type: soft
    value: "{{ nofile_soft_limit }}"

- block:
    - name: check the mountpoint of debugfs
      command: findmnt --noheadings --output TARGET --source debugfs
      register: comm_res
      changed_when: False
      ignore_errors: yes

    - name: mount the debugfs if necessary
      become: yes
      command: mount -t debugfs none /sys/kernel/debug
      args:
        warn: no
      changed_when: comm_res.rc != 0
      when: comm_res.rc != 0

    - name: save the mountpoint of debugfs
      set_fact:
        debugfs_mountpoint: "{{ comm_res.stdout if comm_res.rc == 0 else '/sys/kernel/debug' }}"
  when: trace_transactions_block_rq or trace_load_block_rq
...
