---
- name: ensure the presence of {{ software_dir }}
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ software_dir }}"
    state: directory

- name: ensure the presence of {{ software_dir }}
  become: yes
  file:
    owner: "{{ lookup('env', 'USER') }}"
    path: "{{ software_dir }}"
    state: directory
  delegate_to: localhost
  run_once: yes

- include_tasks: install_jdk_maven.yml
  loop:
    - localhost
    - "{{ inventory_hostname }}"
  loop_control:
    loop_var: cur_host

- name: install dependent apt packages (remote)
  become: yes
  apt:
    autoclean: yes
    install_recommends: no
    name:
      - tar
      - sysstat
      - python3-numpy
      - parted
      - xfsprogs
      - hdparm
      - build-essential
    state: present
    update_cache: yes

- name: install dependent apt packages (local)
  become: yes
  apt:
    autoclean: yes
    install_recommends: no
    name:
      - sysstat
    state: present
    update_cache: yes
  delegate_to: localhost
  run_once: yes

- name: clone YCSB
  git:
    bare: no
    clone: yes
    depth: 1
    dest: "{{ ycsb_dir }}"
    force: yes
    remote: origin
    repo: https://github.com/ljishen/YCSB.git
    update: yes
    version: remote-rocksdb
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name
  delegate_to: localhost

- name: clone rocksdbjni-rmi
  git:
    bare: no
    clone: yes
    depth: 1
    dest: "{{ rocksdbjni_rmi_dir }}"
    force: yes
    remote: origin
    repo: https://github.com/ljishen/rocksdbjni-rmi.git
    update: yes
    version: HEAD
  register: git_res

- name: build rocksdbjni-rmi
  command: mvn clean package
  args:
    chdir: "{{ rocksdbjni_rmi_dir }}"
  environment:
    PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"
  when: git_res.after != git_res.before
  changed_when: git_res.after != git_res.before

- name: ensure the presence of {{ scripts_dir }}
  file:
    path: "{{ scripts_dir }}"
    state: directory
  loop:
    - localhost
    - "{{ inventory_hostname }}"
  delegate_to: "{{ item }}"

- name: check whether device rotational
  shell: lsblk --noheadings --nodeps --output ROTA {{ device_fullname }} | tr -d '[:blank:]'
  loop: "{{ device_fullnames }}"
  loop_control:
    loop_var: device_fullname
  register: rota_res

- name: store rotational fact
  set_fact:
    rota_of_device: >
      {{ (rota_of_device | default({})) | combine({ item.device_fullname : (item.stdout == '1') }) }}
    rota_of_inventory: "{{ (rota_of_inventory | default(False)) or (item.stdout == '1') }}"
  loop: "{{ rota_res.results }}"

- block:
    - name: download fio {{ fio_version }}
      unarchive:
        creates: "{{ fio_dir }}/fio"
        dest: "{{ software_dir }}"
        keep_newer: no
        owner: "{{ ansible_user }}"
        remote_src: yes
        src: https://codeload.github.com/axboe/fio/tar.gz/fio-{{ fio_version }}
      register: unarchive_res

    - name: compile fio
      command: make -j {{ ansible_processor_vcpus }}
      args:
        chdir: "{{ fio_dir }}"
        creates: "{{ fio_dir }}/fio"

    - name: download discard sectors script
      get_url:
        backup: no
        dest: "{{ scripts_dir }}/{{ discard_sectors_script_filename }}"
        force: yes
        mode: u+rx
        owner: "{{ ansible_user }}"
        url: https://raw.githubusercontent.com/ljishen/my-awesome-scripts/master/bash/storage/{{ discard_sectors_script_filename }}
  when: load_data and not rota_of_inventory

- name: download verify steady state script
  get_url:
    backup: no
    dest: "{{ scripts_dir }}/{{ verify_steady_state_script_filename }}"
    force: yes
    mode: u+rx
    owner: "{{ ansible_user }}"
    url: https://raw.githubusercontent.com/ljishen/my-awesome-scripts/master/python/performance/{{ verify_steady_state_script_filename }}

- name: download CPUfreq governor script
  get_url:
    backup: no
    dest: "{{ scripts_dir }}/{{ enable_cpufreq_governor_script_filename }}"
    force: yes
    mode: u+rx
    owner: "{{ lookup('env', 'USER') }}"
    url: https://raw.githubusercontent.com/ljishen/my-awesome-scripts/master/bash/processor/{{ enable_cpufreq_governor_script_filename }}
  delegate_to: localhost
  run_once: yes

- name: config scaling governor for online CPUs (remote)
  become: yes
  script: "{{ scripts_dir }}/{{ enable_cpufreq_governor_script_filename }} {{ cpu_scaling_governor }}"
  register: cpu_config_res
  changed_when: "cpu_config_res.rc == 0"

- name: config scaling governor for online CPUs (local)
  become: yes
  script: "{{ scripts_dir }}/{{ enable_cpufreq_governor_script_filename }} {{ cpu_scaling_governor }}"
  register: cpu_config_res
  changed_when: "cpu_config_res.rc == 0"
  delegate_to: localhost
  run_once: yes

- name: set the nofile soft limit to {{ nofile_soft_limit }}
  become: yes
  pam_limits:
    domain: "{{ ansible_user }}"
    limit_item: nofile
    limit_type: soft
    value: "{{ nofile_soft_limit }}"
...
