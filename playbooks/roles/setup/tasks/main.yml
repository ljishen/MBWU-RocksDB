---
- name: ensure the presence of {{ software_dir }}
  become: yes
  file:
    owner: "{{ ansible_user }}"
    path: "{{ software_dir }}"
    state: directory

- name: ensure the presence of {{ software_dir }}
  become: yes
  file:
    owner: "{{ lookup('env', 'USER') }}"
    path: "{{ software_dir }}"
    state: directory
  delegate_to: localhost
  run_once: yes

- include_tasks: install_jdk_maven.yml
  loop:
    - localhost
    - "{{ inventory_hostname }}"
  loop_control:
    loop_var: cur_host

- name: install dependent apt packages (remote)
  become: yes
  apt:
    autoclean: yes
    install_recommends: no
    name:
      - sysstat
      - python3-numpy
      - parted
      - xfsprogs
      - hdparm
      - fio
      - build-essential
    state: present
    update_cache: yes

- name: install dependent apt packages (local)
  become: yes
  apt:
    autoclean: yes
    install_recommends: no
    name:
      - sysstat
    state: present
    update_cache: yes
  delegate_to: localhost

- name: clone YCSB
  git:
    bare: no
    clone: yes
    depth: 1
    dest: "{{ ycsb_dir }}"
    force: yes
    remote: origin
    repo: https://github.com/ljishen/YCSB.git
    update: yes
    version: remote-rocksdb
  loop: "{{ device_names }}"
  loop_control:
    loop_var: device_name
  delegate_to: localhost

- name: clone rocksdbjni-rmi
  git:
    bare: no
    clone: yes
    depth: 1
    dest: "{{ rocksdbjni_rmi_dir }}"
    force: yes
    remote: origin
    repo: https://github.com/ljishen/rocksdbjni-rmi.git
    update: yes
    version: HEAD

- name: build rocksdbjni-rmi
  command: mvn clean package
  args:
    chdir: "{{ rocksdbjni_rmi_dir }}"
    creates: "{{ rocksdbjni_rmi_jar }}"
  environment:
    PATH: "{{ maven_dir }}/bin:{{ ansible_env.PATH }}"
  changed_when: True

- block:
    - name: download fio {{ fio_version }}
      unarchive:
        creates: "{{ fio_dir }}"
        dest: "{{ software_dir }}"
        keep_newer: no
        owner: "{{ ansible_user }}"
        remote_src: yes
        src: https://codeload.github.com/axboe/fio/tar.gz/fio-{{ fio_version }}
    - name: compile fio
      command: make -j {{ ansible_processor_vcpus }}
      args:
        chdir: "{{ fio_dir }}"
  when: load_data

- name: config scaling governor for online CPUs
  become: yes
  script: "{{ role_path }}/files/config_cpu.sh {{ cpu_scaling_governor }}"
  register: cpu_config_res
  changed_when: "cpu_config_res.rc == 0"

- name: set the nofile soft limit to {{ nofile_soft_limit }}
  become: yes
  pam_limits:
    domain: "{{ ansible_user }}"
    limit_item: nofile
    limit_type: soft
    value: "{{ nofile_soft_limit }}"
...
